version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-db:
    image: postgres:14-alpine
    ports:
      - "${ORDER_DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${ORDER_DB_NAME}
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASSWORD}
    volumes:
      - order-data:/var/lib/postgresql/data

  balance-db:
    image: postgres:14-alpine
    ports:
      - "${BALANCE_DB_PORT:-5433}:5432"
    environment:
      POSTGRES_DB: ${BALANCE_DB_NAME}
      POSTGRES_USER: ${BALANCE_DB_USER}
      POSTGRES_PASSWORD: ${BALANCE_DB_PASSWORD}
    volumes:
      - balance-data:/var/lib/postgresql/data

  delivery-db:
    image: postgres:14-alpine
    ports:
      - "${DELIVERY_DB_PORT:-5434}:5432"
    environment:
      POSTGRES_DB: ${DELIVERY_DB_NAME}
      POSTGRES_USER: ${DELIVERY_DB_USER}
      POSTGRES_PASSWORD: ${DELIVERY_DB_PASSWORD}
    volumes:
      - delivery-data:/var/lib/postgresql/data

  order-service:
    build: 
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_healthy
      order-db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:29092
      - DB_HOST=order-db
      - DB_PORT=5432
      - DB_NAME=${ORDER_DB_NAME}
      - DB_USER=${ORDER_DB_USER}
      - DB_PASSWORD=${ORDER_DB_PASSWORD}

  balance-service:
    build:
      context: ./balance-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      kafka:
        condition: service_healthy
      balance-db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:29092
      - DB_HOST=balance-db
      - DB_PORT=5432
      - DB_NAME=${BALANCE_DB_NAME:-balance_db}
      - DB_USER=${BALANCE_DB_USER:-balance_user}
      - DB_PASSWORD=${BALANCE_DB_PASSWORD:-balance_pass}

  delivery-service:
    build:
      context: ./delivery-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      kafka:
        condition: service_healthy
      delivery-db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:29092
      - DB_HOST=delivery-db
      - DB_PORT=5432
      - DB_NAME=${DELIVERY_DB_NAME:-delivery_db}
      - DB_USER=${DELIVERY_DB_USER:-delivery_user}
      - DB_PASSWORD=${DELIVERY_DB_PASSWORD:-delivery_pass}

volumes:
  order-data:
  balance-data:
  delivery-data: